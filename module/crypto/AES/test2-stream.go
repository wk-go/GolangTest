package main
//aes ofb模式测试
import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"fmt"
)

type ofbTest struct {
	name string
	key  []byte
	iv   []byte
	in   []byte
	out  []byte
}

func main() {

	var tt = ofbTest{
		// NIST SP 800-38A pp 52-55
		"OFB-AES128",
		commonKey128,
		commonIV,
		commonInput,
		[]byte{
			0x3b, 0x3f, 0xd9, 0x2e, 0xb7, 0x2d, 0xad, 0x20, 0x33, 0x34, 0x49, 0xf8, 0xe8, 0x3c, 0xfb, 0x4a,
			0x77, 0x89, 0x50, 0x8d, 0x16, 0x91, 0x8f, 0x03, 0xf5, 0x3c, 0x52, 0xda, 0xc5, 0x4e, 0xd8, 0x25,
			0x97, 0x40, 0x05, 0x1e, 0x9c, 0x5f, 0xec, 0xf6, 0x43, 0x44, 0xf7, 0xa8, 0x22, 0x60, 0xed, 0xcc,
			0x30, 0x4c, 0x65, 0x28, 0xf6, 0x59, 0xc7, 0x78, 0x66, 0xa5, 0x10, 0xd9, 0xc1, 0xd6, 0xae, 0x5e,
		},
	}

	test := tt.name

	c, err := aes.NewCipher(tt.key)
	if err != nil {
		fmt.Printf("%s: NewCipher(%d bytes) = %s \n", test, len(tt.key), err)
	}

	for j := 0; j <= 5; j += 5 {
		plaintext := tt.in[0 : len(tt.in) - j]
		ofb := cipher.NewOFB(c, tt.iv)
		ciphertext := make([]byte, len(plaintext))
		ofb.XORKeyStream(ciphertext, plaintext)

		fmt.Println(j,":plaintext :",plaintext)
		fmt.Println(j,":ciphertext:",ciphertext)
		fmt.Println(j,":#out text :",tt.out[:len(plaintext)])

		if !bytes.Equal(ciphertext, tt.out[:len(plaintext)]) {
			fmt.Printf("%s/%d: encrypting\ninput % x\nhave % x\nwant % x \n", test, len(plaintext), plaintext, ciphertext, tt.out)
		}
	}
	fmt.Println("\n\n")

	for j := 0; j <= 5; j += 5 {
		ciphertext := tt.out[0 : len(tt.in)-j]
		ofb := cipher.NewOFB(c, tt.iv)
		plaintext := make([]byte, len(ciphertext))
		ofb.XORKeyStream(plaintext, ciphertext)

		fmt.Println(j,":plaintext :",plaintext)
		fmt.Println(j,":ciphertext:",ciphertext)
		fmt.Println(j,":#in text  :",tt.in[:len(plaintext)])

		if !bytes.Equal(plaintext, tt.in[:len(ciphertext)]) {
			fmt.Printf("%s/%d: decrypting\nhave % x\nwant % x \n", test, len(ciphertext), plaintext, tt.in)
		}
	}

}

var commonInput = []byte{
	0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
}

var commonKey128 = []byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c}

var commonKey192 = []byte{
	0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
	0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
}

var commonKey256 = []byte{
	0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
	0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4,
}

var commonIV = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f}

